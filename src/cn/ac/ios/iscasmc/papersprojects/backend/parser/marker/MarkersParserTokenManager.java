/* Generated By:JavaCC: Do not edit this line. MarkersParserTokenManager.java */
package cn.ac.ios.iscasmc.papersprojects.backend.parser.marker;
import java.lang.StringBuilder;

/** Token Manager. */
public class MarkersParserTokenManager implements MarkersParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffff800000L) != 0L || (active1 & 0xa4fffL) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0x1000000000L) != 0L)
            return 137;
         if ((active0 & 0x200080000000L) != 0L || (active1 & 0x20000L) != 0L)
            return 149;
         return -1;
      case 2:
         if ((active1 & 0x20000L) != 0L)
            return 148;
         return -1;
      case 3:
         if ((active1 & 0x20000L) != 0L)
            return 139;
         return -1;
      case 4:
         if ((active1 & 0x20000L) != 0L)
            return 141;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 79);
      case 92:
         return jjMoveStringLiteralDfa1_0(0xffffffffff800000L, 0xa4fffL);
      case 123:
         return jjStopAtPos(0, 76);
      case 125:
         return jjStopAtPos(0, 77);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x50L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000000L, active1, 0x80000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4808000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200080000000L, active1, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0xaaa1150110000000L, active1, 0x2aaL);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 123:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 125:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xaeb1350d12000000L, active1, 0x2aaL);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000025000000L, active1, 0x20000L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x102820080000000L, active1, 0x10L);
      case 105:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 39);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 62);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x1L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0x80100L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400008000000L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 117:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 30);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x108000080000000L, active1, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x1L);
      case 105:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(3, 47);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 50);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(3, 68);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(3, 70);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000004000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x410000802000000L, active1, 0L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 41);
         break;
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400800000L, active1, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0xaaa1150110000000L, active1, 0x2aaL);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400008000000L, active1, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x221000000L, active1, 0L);
      case 117:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 45);
         break;
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0xa0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 88:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 97:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 24);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 33);
         break;
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x100L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(4, 83);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400008000000L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x10080002000000L, active1, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x1010400000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 141);
         return jjMoveStringLiteralDfa5_0(active0, 0x140000184000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(5, 31);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 34);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(5, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(5, 52);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(5, 54);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 56);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(5, 64);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(5, 72);
         return jjMoveStringLiteralDfa6_0(active0, 0x820000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x201040100000000L, active1, 0x20L);
      case 105:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(5, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(5, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400008000000L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(6, 58);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000100000000L, active1, 0x200L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x2L);
      case 105:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 48);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(6, 69);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(6, 71);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x820000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x400008000000L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x20100000000000L, active1, 0x2L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(7, 46);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(7, 66);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x280000100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(8, 32);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 44);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(8, 53);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 55);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 57);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(8, 65);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(8, 73);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(9, 59);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 28);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(10, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 151;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 34)
                     jjAddStates(0, 1);
                  else if (curChar == 39)
                     jjAddStates(2, 3);
                  if (curChar == 34)
                     jjAddStates(4, 5);
                  else if (curChar == 39)
                     jjAddStates(6, 7);
                  if (curChar == 39)
                     jjAddStates(8, 9);
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  if (curChar == 39)
                     jjAddStates(12, 14);
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  if (curChar == 39)
                     jjAddStates(17, 18);
                  if (curChar == 39)
                     jjAddStates(19, 20);
                  if (curChar == 39)
                     jjAddStates(21, 22);
                  if (curChar == 39)
                     jjAddStates(23, 24);
                  break;
               case 6:
                  if (curChar == 39)
                     jjAddStates(21, 22);
                  break;
               case 21:
                  if (curChar == 39)
                     jjAddStates(19, 20);
                  break;
               case 26:
                  if (curChar == 39)
                     jjAddStates(17, 18);
                  break;
               case 41:
                  if (curChar == 39)
                     jjAddStates(15, 16);
                  break;
               case 46:
                  if (curChar == 39)
                     jjAddStates(12, 14);
                  break;
               case 69:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 74:
                  if (curChar == 39)
                     jjAddStates(8, 9);
                  break;
               case 89:
                  if (curChar == 39)
                     jjAddStates(6, 7);
                  break;
               case 94:
                  if (curChar == 39)
                     jjAddStates(2, 3);
                  break;
               case 109:
                  if (curChar == 34)
                     jjAddStates(4, 5);
                  break;
               case 114:
                  if (curChar == 34)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 141:
                  if (curChar == 115)
                     jjAddStates(25, 26);
                  else if (curChar == 116)
                     jjCheckNAdd(140);
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 142;
                  else if (curChar == 105)
                     jjCheckNAdd(140);
                  break;
               case 1:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 149;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 137;
                  else if (curChar == 96)
                     jjAddStates(27, 28);
                  if (curChar == 96)
                     jjAddStates(29, 30);
                  if (curChar == 96)
                     jjAddStates(31, 32);
                  if (curChar == 96)
                     jjAddStates(33, 34);
                  if (curChar == 96)
                     jjAddStates(35, 37);
                  if (curChar == 96)
                     jjAddStates(38, 39);
                  if (curChar == 96)
                     jjAddStates(40, 41);
                  if (curChar == 96)
                     jjAddStates(42, 43);
                  if (curChar == 96)
                     jjAddStates(44, 45);
                  if (curChar == 96)
                     jjAddStates(46, 47);
                  break;
               case 0:
                  if (curChar == 92)
                     jjAddStates(48, 71);
                  break;
               case 2:
                  if (curChar == 125 && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 65 && kind > 1)
                     kind = 1;
                  break;
               case 7:
                  if (curChar == 125 && kind > 2)
                     kind = 2;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 97 && kind > 2)
                     kind = 2;
                  break;
               case 11:
                  if (curChar == 96)
                     jjAddStates(46, 47);
                  break;
               case 12:
                  if (curChar == 125 && kind > 3)
                     kind = 3;
                  break;
               case 13:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 65 && kind > 3)
                     kind = 3;
                  break;
               case 16:
                  if (curChar == 96)
                     jjAddStates(44, 45);
                  break;
               case 17:
                  if (curChar == 125 && kind > 4)
                     kind = 4;
                  break;
               case 18:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 97 && kind > 4)
                     kind = 4;
                  break;
               case 22:
                  if (curChar == 125 && kind > 5)
                     kind = 5;
                  break;
               case 23:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 69 && kind > 5)
                     kind = 5;
                  break;
               case 27:
                  if (curChar == 125 && kind > 6)
                     kind = 6;
                  break;
               case 28:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 101 && kind > 6)
                     kind = 6;
                  break;
               case 31:
                  if (curChar == 96)
                     jjAddStates(42, 43);
                  break;
               case 32:
                  if (curChar == 125 && kind > 7)
                     kind = 7;
                  break;
               case 33:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 69 && kind > 7)
                     kind = 7;
                  break;
               case 36:
                  if (curChar == 96)
                     jjAddStates(40, 41);
                  break;
               case 37:
                  if (curChar == 125 && kind > 8)
                     kind = 8;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 42:
                  if (curChar == 125 && kind > 9)
                     kind = 9;
                  break;
               case 43:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 73 && kind > 9)
                     kind = 9;
                  break;
               case 47:
               case 49:
                  if (curChar == 105 && kind > 10)
                     kind = 10;
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 123)
                     jjAddStates(72, 73);
                  break;
               case 51:
                  if (curChar == 125 && kind > 10)
                     kind = 10;
                  break;
               case 52:
               case 54:
                  if (curChar == 105)
                     jjCheckNAdd(51);
                  break;
               case 53:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if (curChar == 96)
                     jjAddStates(38, 39);
                  break;
               case 56:
                  if (curChar == 125 && kind > 11)
                     kind = 11;
                  break;
               case 57:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 73 && kind > 11)
                     kind = 11;
                  break;
               case 60:
                  if (curChar == 96)
                     jjAddStates(35, 37);
                  break;
               case 61:
               case 63:
                  if (curChar == 105 && kind > 12)
                     kind = 12;
                  break;
               case 62:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 123)
                     jjAddStates(74, 75);
                  break;
               case 65:
                  if (curChar == 125 && kind > 12)
                     kind = 12;
                  break;
               case 66:
               case 68:
                  if (curChar == 105)
                     jjCheckNAdd(65);
                  break;
               case 67:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if (curChar == 125 && kind > 13)
                     kind = 13;
                  break;
               case 71:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 79 && kind > 13)
                     kind = 13;
                  break;
               case 75:
                  if (curChar == 125 && kind > 14)
                     kind = 14;
                  break;
               case 76:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 111 && kind > 14)
                     kind = 14;
                  break;
               case 79:
                  if (curChar == 96)
                     jjAddStates(33, 34);
                  break;
               case 80:
                  if (curChar == 125 && kind > 15)
                     kind = 15;
                  break;
               case 81:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 79 && kind > 15)
                     kind = 15;
                  break;
               case 84:
                  if (curChar == 96)
                     jjAddStates(31, 32);
                  break;
               case 85:
                  if (curChar == 125 && kind > 16)
                     kind = 16;
                  break;
               case 86:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 111 && kind > 16)
                     kind = 16;
                  break;
               case 90:
                  if (curChar == 125 && kind > 17)
                     kind = 17;
                  break;
               case 91:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 85 && kind > 17)
                     kind = 17;
                  break;
               case 95:
                  if (curChar == 125 && kind > 18)
                     kind = 18;
                  break;
               case 96:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 117 && kind > 18)
                     kind = 18;
                  break;
               case 99:
                  if (curChar == 96)
                     jjAddStates(29, 30);
                  break;
               case 100:
                  if (curChar == 125 && kind > 19)
                     kind = 19;
                  break;
               case 101:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 85 && kind > 19)
                     kind = 19;
                  break;
               case 104:
                  if (curChar == 96)
                     jjAddStates(27, 28);
                  break;
               case 105:
                  if (curChar == 125 && kind > 20)
                     kind = 20;
                  break;
               case 106:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 117 && kind > 20)
                     kind = 20;
                  break;
               case 110:
                  if (curChar == 125 && kind > 21)
                     kind = 21;
                  break;
               case 111:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 85 && kind > 21)
                     kind = 21;
                  break;
               case 115:
                  if (curChar == 125 && kind > 22)
                     kind = 22;
                  break;
               case 116:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 117 && kind > 22)
                     kind = 22;
                  break;
               case 119:
                  if (curChar == 104)
                     jjAddStates(76, 82);
                  break;
               case 120:
                  if (curChar == 109 && kind > 80)
                     kind = 80;
                  break;
               case 121:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 116 && kind > 80)
                     kind = 80;
                  break;
               case 123:
                  if (curChar == 105)
                     jjCheckNAdd(122);
                  break;
               case 124:
                  if (curChar == 102 && kind > 80)
                     kind = 80;
                  break;
               case 125:
                  if (curChar == 115)
                     jjCheckNAdd(124);
                  break;
               case 126:
                  if (curChar == 116)
                     jjCheckNAdd(122);
                  break;
               case 127:
                  if (curChar == 108 && kind > 80)
                     kind = 80;
                  break;
               case 128:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 107)
                     kind = 80;
                  break;
               case 131:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 98)
                     jjCheckNAddTwoStates(124, 135);
                  break;
               case 135:
                  if (curChar == 98 && kind > 80)
                     kind = 80;
                  break;
               case 136:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 137:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 116)
                     jjAddStates(83, 86);
                  break;
               case 140:
                  if (curChar == 116 && kind > 82)
                     kind = 82;
                  break;
               case 142:
                  if (curChar == 102 && kind > 82)
                     kind = 82;
                  break;
               case 143:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 116)
                     jjCheckNAdd(140);
                  break;
               case 145:
                  if (curChar == 115)
                     jjAddStates(25, 26);
                  break;
               case 146:
                  if (curChar == 108 && kind > 82)
                     kind = 82;
                  break;
               case 147:
                  if (curChar == 99 && kind > 82)
                     kind = 82;
                  break;
               case 148:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 149:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 151 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   117, 118, 97, 98, 112, 113, 92, 93, 77, 78, 72, 73, 48, 49, 50, 44, 
   45, 29, 30, 24, 25, 9, 10, 4, 5, 146, 147, 107, 108, 102, 103, 87, 
   88, 82, 83, 62, 63, 64, 58, 59, 39, 40, 34, 35, 19, 20, 14, 15, 
   1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 55, 60, 69, 74, 79, 84, 
   89, 94, 99, 104, 109, 114, 138, 150, 53, 54, 67, 68, 121, 123, 125, 126, 
   129, 133, 134, 141, 143, 144, 145, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, 
"\134\141\154\160\150\141", "\134\142\145\164\141", "\134\147\141\155\155\141", 
"\134\144\145\154\164\141", "\134\145\160\163\151\154\157\156", 
"\134\166\141\162\145\160\163\151\154\157\156", "\134\172\145\164\141", "\134\145\164\141", "\134\164\150\145\164\141", 
"\134\166\141\162\164\150\145\164\141", "\134\151\157\164\141", "\134\153\141\160\160\141", 
"\134\154\141\155\142\144\141", "\134\155\165", "\134\156\165", "\134\170\151", "\134\160\151", 
"\134\166\141\162\160\151", "\134\162\150\157", "\134\166\141\162\162\150\157", 
"\134\163\151\147\155\141", "\134\166\141\162\163\151\147\155\141", "\134\164\141\165", 
"\134\165\160\163\151\154\157\156", "\134\160\150\151", "\134\166\141\162\160\150\151", "\134\143\150\151", 
"\134\160\163\151", "\134\157\155\145\147\141", "\134\107\141\155\155\141", 
"\134\166\141\162\107\141\155\155\141", "\134\104\145\154\164\141", "\134\166\141\162\104\145\154\164\141", 
"\134\124\150\145\164\141", "\134\166\141\162\124\150\145\164\141", "\134\114\141\155\142\144\141", 
"\134\166\141\162\114\141\155\142\144\141", "\134\130\151", "\134\166\141\162\130\151", "\134\120\151", 
"\134\166\141\162\120\151", "\134\123\151\147\155\141", "\134\166\141\162\123\151\147\155\141", 
"\134\125\160\163\151\154\157\156", "\134\166\141\162\125\160\163\151\154\157\156", "\134\120\150\151", 
"\134\166\141\162\120\150\151", "\134\120\163\151", "\134\166\141\162\120\163\151", 
"\134\117\155\145\147\141", "\134\166\141\162\117\155\145\147\141", "\134\173", "\134\175", "\173", 
"\175", "\134\44", "\44", null, "\134\164\145\170\164", null, "\134\145\155\160\150", 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[151];
private final int[] jjstateSet = new int[302];
protected char curChar;
/** Constructor. */
public MarkersParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MarkersParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 151; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 84)
   {
      jjmatchedKind = 84;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
